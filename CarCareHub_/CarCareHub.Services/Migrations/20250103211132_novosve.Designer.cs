// <auto-generated />
using System;
using CarCareHub.Services.Database;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace CarCareHub.Services.Migrations
{
    [DbContext(typeof(CchV2AliContext))]
    [Migration("20250103211132_novosve")]
    partial class novosve
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.12")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("CarCareHub.Services.Database.Autoservis", b =>
                {
                    b.Property<int>("AutoservisId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("AutoservisID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AutoservisId"));

                    b.Property<string>("Adresa")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("adresa");

                    b.Property<string>("Email")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("email");

                    b.Property<int?>("GradId")
                        .HasColumnType("int")
                        .HasColumnName("gradID");

                    b.Property<string>("Jib")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("jib");

                    b.Property<string>("LozinkaHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LozinkaSalt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Mbs")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("MBS");

                    b.Property<string>("Naziv")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("naziv");

                    b.Property<string>("Password")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("password_");

                    b.Property<byte[]>("SlikaProfila")
                        .IsUnicode(false)
                        .HasColumnType("VARBINARY(MAX)")
                        .HasColumnName("slika_Profila");

                    b.Property<byte[]>("SlikaThumb")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("Telefon")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("telefon");

                    b.Property<int?>("UlogaId")
                        .HasColumnType("int")
                        .HasColumnName("ulogaID");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("VlasnikFirme")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("VoziloId")
                        .HasColumnType("int")
                        .HasColumnName("voziloID");

                    b.HasKey("AutoservisId")
                        .HasName("PK_autoservis");

                    b.HasIndex("GradId");

                    b.HasIndex("UlogaId");

                    b.HasIndex("VoziloId");

                    b.ToTable("Autoservis");
                });

            modelBuilder.Entity("CarCareHub.Services.Database.BPAutodijeloviAutoservis", b =>
                {
                    b.Property<int?>("BPAutodijeloviAutoservisId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int?>("BPAutodijeloviAutoservisId"));

                    b.Property<int?>("AutoservisId")
                        .HasColumnType("int");

                    b.Property<int?>("FirmaAutodijelovaID")
                        .HasColumnType("int");

                    b.HasKey("BPAutodijeloviAutoservisId");

                    b.HasIndex("AutoservisId");

                    b.HasIndex("FirmaAutodijelovaID");

                    b.ToTable("BPAutodijeloviAutoservis");
                });

            modelBuilder.Entity("CarCareHub.Services.Database.ChatAutoservisKlijent", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("AutoservisId")
                        .HasColumnType("int");

                    b.Property<int>("KlijentId")
                        .HasColumnType("int");

                    b.Property<string>("Poruka")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PoslanoOdKlijenta")
                        .HasColumnType("bit");

                    b.Property<DateTime>("VrijemeSlanja")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("AutoservisId");

                    b.HasIndex("KlijentId");

                    b.ToTable("ChatAutoservisKlijents");
                });

            modelBuilder.Entity("CarCareHub.Services.Database.ChatKlijentZaposlenik", b =>
                {
                    b.Property<int>("ChatKlijentZaposlenikId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ChatKlijentZaposlenikId"));

                    b.Property<int?>("AutoservisId")
                        .HasColumnType("int");

                    b.Property<int?>("KlijentId")
                        .HasColumnType("int");

                    b.Property<DateTime>("VrijemeZadnjePoruke")
                        .HasColumnType("datetime2");

                    b.Property<int?>("ZaposlenikId")
                        .HasColumnType("int");

                    b.HasKey("ChatKlijentZaposlenikId")
                        .HasName("pk_chat2");

                    b.HasIndex("AutoservisId");

                    b.HasIndex("KlijentId");

                    b.HasIndex("ZaposlenikId");

                    b.ToTable("Chat_klijent_zaposlenik", (string)null);
                });

            modelBuilder.Entity("CarCareHub.Services.Database.Drzava", b =>
                {
                    b.Property<int>("DrzavaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("DrzavaID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DrzavaId"));

                    b.Property<string>("NazivDrzave")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("naziv_drzave");

                    b.HasKey("DrzavaId")
                        .HasName("PK_drzava");

                    b.ToTable("Drzava", (string)null);
                });

            modelBuilder.Entity("CarCareHub.Services.Database.FirmaAutodijelova", b =>
                {
                    b.Property<int>("FirmaAutodijelovaID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("FirmaID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FirmaAutodijelovaID"));

                    b.Property<string>("Adresa")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("adresa");

                    b.Property<string>("Email")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("email");

                    b.Property<int?>("GradId")
                        .HasColumnType("int")
                        .HasColumnName("gradID");

                    b.Property<int?>("IzvjestajId")
                        .HasColumnType("int")
                        .HasColumnName("izvjestajID");

                    b.Property<string>("JIB")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LozinkaHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LozinkaSalt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("MBS")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("NazivFirme")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("naziv_firme");

                    b.Property<string>("Password")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("password_");

                    b.Property<byte[]>("SlikaProfila")
                        .HasMaxLength(40)
                        .IsUnicode(false)
                        .HasColumnType("VARBINARY(MAX)")
                        .HasColumnName("slika_Profila");

                    b.Property<string>("Telefon")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("telefon");

                    b.Property<int?>("UlogaId")
                        .HasColumnType("int")
                        .HasColumnName("ulogaID");

                    b.Property<string>("Username")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FirmaAutodijelovaID")
                        .HasName("PK_firma");

                    b.HasIndex("GradId");

                    b.HasIndex("IzvjestajId");

                    b.HasIndex("UlogaId");

                    b.ToTable("Firma_autodijelova", (string)null);
                });

            modelBuilder.Entity("CarCareHub.Services.Database.Godiste", b =>
                {
                    b.Property<int>("GodisteId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GodisteId"));

                    b.Property<int?>("Godiste_")
                        .HasColumnType("int");

                    b.HasKey("GodisteId");

                    b.ToTable("Godiste");
                });

            modelBuilder.Entity("CarCareHub.Services.Database.Grad", b =>
                {
                    b.Property<int>("GradId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("GradID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("GradId"));

                    b.Property<int?>("DrzavaId")
                        .HasColumnType("int")
                        .HasColumnName("drzavaID");

                    b.Property<string>("NazivGrada")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("naziv_grada");

                    b.HasKey("GradId")
                        .HasName("PK_grad");

                    b.HasIndex("DrzavaId");

                    b.ToTable("Grad", (string)null);
                });

            modelBuilder.Entity("CarCareHub.Services.Database.Izvjestaj", b =>
                {
                    b.Property<int>("IzvjestajId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("IzvjestajID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("IzvjestajId"));

                    b.HasKey("IzvjestajId")
                        .HasName("PK_izvjestaj");

                    b.ToTable("Izvjestaj", (string)null);
                });

            modelBuilder.Entity("CarCareHub.Services.Database.Kategorija", b =>
                {
                    b.Property<int>("KategorijaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("KategorijaID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("KategorijaId"));

                    b.Property<string>("NazivKategorije")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("naziv_kategorije");

                    b.HasKey("KategorijaId")
                        .HasName("PK_kategorija");

                    b.ToTable("Kategorija", (string)null);
                });

            modelBuilder.Entity("CarCareHub.Services.Database.Klijent", b =>
                {
                    b.Property<int>("KlijentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("KlijentID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("KlijentId"));

                    b.Property<string>("BrojTelefona")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("broj_telefona");

                    b.Property<string>("Email")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("email");

                    b.Property<int?>("GradId")
                        .HasColumnType("int")
                        .HasColumnName("gradID");

                    b.Property<string>("Ime")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ime");

                    b.Property<string>("LozinkaHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LozinkaSalt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Password")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("password_");

                    b.Property<string>("Prezime")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("prezime");

                    b.Property<string>("Spol")
                        .HasMaxLength(10)
                        .IsUnicode(false)
                        .HasColumnType("varchar(10)")
                        .HasColumnName("spol");

                    b.Property<int>("UlogaId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("username");

                    b.HasKey("KlijentId")
                        .HasName("PK_klijent");

                    b.HasIndex("GradId");

                    b.HasIndex("UlogaId");

                    b.ToTable("Klijent", (string)null);
                });

            modelBuilder.Entity("CarCareHub.Services.Database.Korpa", b =>
                {
                    b.Property<int>("KorpaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("KorpaId"));

                    b.Property<int?>("AutoservisId")
                        .HasColumnType("int");

                    b.Property<int?>("KlijentId")
                        .HasColumnType("int");

                    b.Property<int?>("Kolicina")
                        .HasColumnType("int");

                    b.Property<int?>("ProizvodId")
                        .HasColumnType("int");

                    b.Property<decimal?>("UkupnaCijenaProizvoda")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("ZaposlenikId")
                        .HasColumnType("int");

                    b.HasKey("KorpaId");

                    b.HasIndex("AutoservisId");

                    b.HasIndex("KlijentId");

                    b.HasIndex("ProizvodId");

                    b.HasIndex("ZaposlenikId");

                    b.ToTable("Korpas");
                });

            modelBuilder.Entity("CarCareHub.Services.Database.Model", b =>
                {
                    b.Property<int>("ModelId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ModelId"));

                    b.Property<int>("GodisteId")
                        .HasColumnType("int");

                    b.Property<string>("NazivModela")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("VoziloId")
                        .HasColumnType("int");

                    b.HasKey("ModelId");

                    b.HasIndex("GodisteId");

                    b.HasIndex("VoziloId");

                    b.ToTable("Model");
                });

            modelBuilder.Entity("CarCareHub.Services.Database.Narudzba", b =>
                {
                    b.Property<int>("NarudzbaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NarudzbaId"));

                    b.Property<DateTime?>("DatumIsporuke")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("DatumNarudzbe")
                        .HasColumnType("datetime2");

                    b.Property<decimal?>("UkupnaCijenaNarudzbe")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool?>("ZavrsenaNarudzba")
                        .HasColumnType("bit");

                    b.HasKey("NarudzbaId");

                    b.ToTable("Narudzbas");
                });

            modelBuilder.Entity("CarCareHub.Services.Database.NarudzbaStavka", b =>
                {
                    b.Property<int>("NarudzbaStavkaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("NarudzbaStavkaId"));

                    b.Property<int?>("Kolicina")
                        .HasColumnType("int");

                    b.Property<int?>("KorpaId")
                        .HasColumnType("int");

                    b.Property<int?>("NarudzbaId")
                        .HasColumnType("int");

                    b.Property<int?>("ProizvodId")
                        .HasColumnType("int");

                    b.HasKey("NarudzbaStavkaId");

                    b.HasIndex("KorpaId");

                    b.HasIndex("NarudzbaId");

                    b.HasIndex("ProizvodId");

                    b.ToTable("NarudzbaStavkas");
                });

            modelBuilder.Entity("CarCareHub.Services.Database.PlacanjeAutoservisDijelovi", b =>
                {
                    b.Property<int>("PlacanjeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("PlacanjeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PlacanjeId"));

                    b.Property<int?>("AutoservisId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("Datum")
                        .HasColumnType("datetime")
                        .HasColumnName("datum");

                    b.Property<int?>("FirmaAutodijelovaID")
                        .HasColumnType("int");

                    b.Property<double?>("Iznos")
                        .HasColumnType("float")
                        .HasColumnName("iznos");

                    b.HasKey("PlacanjeId")
                        .HasName("pk_pl");

                    b.HasIndex("AutoservisId");

                    b.HasIndex("FirmaAutodijelovaID");

                    b.ToTable("placanje_autoservis_dijelovi", (string)null);
                });

            modelBuilder.Entity("CarCareHub.Services.Database.Poruka", b =>
                {
                    b.Property<int>("PorukaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PorukaId"));

                    b.Property<int?>("ChatKlijentAutoservisId")
                        .HasColumnType("int");

                    b.Property<int?>("ChatKlijentZaposlenikId")
                        .HasColumnType("int");

                    b.Property<string>("Sadrzaj")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("VrijemeSlanja")
                        .HasColumnType("datetime2");

                    b.HasKey("PorukaId");

                    b.HasIndex("ChatKlijentZaposlenikId");

                    b.ToTable("Poruka");
                });

            modelBuilder.Entity("CarCareHub.Services.Database.Proizvod", b =>
                {
                    b.Property<int>("ProizvodId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProizvodID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProizvodId"));

                    b.Property<decimal?>("Cijena")
                        .HasColumnType("money")
                        .HasColumnName("cijena");

                    b.Property<decimal?>("CijenaSaPopustom")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int?>("FirmaAutodijelovaID")
                        .HasColumnType("int");

                    b.Property<int?>("KategorijaId")
                        .HasColumnType("int")
                        .HasColumnName("kategorijaID");

                    b.Property<int?>("ModelId")
                        .HasColumnType("int");

                    b.Property<string>("ModelProizvoda")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Naziv")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("naziv");

                    b.Property<string>("Opis")
                        .HasColumnType("text")
                        .HasColumnName("opis");

                    b.Property<string>("OriginalniBroj")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("originalni_broj");

                    b.Property<int?>("Popust")
                        .HasColumnType("int");

                    b.Property<int?>("ProizvodjacId")
                        .HasColumnType("int")
                        .HasColumnName("proizvodjacID");

                    b.Property<string>("Sifra")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("sifra");

                    b.Property<byte[]>("Slika")
                        .HasColumnType("varbinary(max)");

                    b.Property<byte[]>("SlikaThumb")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("StateMachine")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("VoziloId")
                        .HasColumnType("int");

                    b.HasKey("ProizvodId")
                        .HasName("pk_proizvod");

                    b.HasIndex("FirmaAutodijelovaID");

                    b.HasIndex("KategorijaId");

                    b.HasIndex("ModelId");

                    b.HasIndex("ProizvodjacId");

                    b.HasIndex("VoziloId");

                    b.ToTable("Proizvod", (string)null);
                });

            modelBuilder.Entity("CarCareHub.Services.Database.Proizvodjac", b =>
                {
                    b.Property<int>("ProizvodjacId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ProizvodjacID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProizvodjacId"));

                    b.Property<string>("NazivProizvodjaca")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("naziv_proizvodjaca");

                    b.HasKey("ProizvodjacId")
                        .HasName("PK_proizvodjac");

                    b.ToTable("Proizvodjac", (string)null);
                });

            modelBuilder.Entity("CarCareHub.Services.Database.Uloge", b =>
                {
                    b.Property<int>("UlogaId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UlogaID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UlogaId"));

                    b.Property<string>("NazivUloge")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("naziv_uloge");

                    b.HasKey("UlogaId")
                        .HasName("PK_uloga");

                    b.ToTable("Uloge", (string)null);
                });

            modelBuilder.Entity("CarCareHub.Services.Database.Usluge", b =>
                {
                    b.Property<int>("UslugeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("UslugeID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UslugeId"));

                    b.Property<decimal?>("Cijena")
                        .HasColumnType("decimal(8, 2)")
                        .HasColumnName("cijena");

                    b.Property<string>("NazivUsluge")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("naziv_usluge");

                    b.Property<string>("Opis")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("opis");

                    b.Property<int?>("autoservisId")
                        .HasColumnType("int");

                    b.HasKey("UslugeId")
                        .HasName("PK_usluge");

                    b.HasIndex("autoservisId");

                    b.ToTable("Usluge", (string)null);
                });

            modelBuilder.Entity("CarCareHub.Services.Database.Vozilo", b =>
                {
                    b.Property<int>("VoziloId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("VoziloId"));

                    b.Property<string>("MarkaVozila")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("VoziloId");

                    b.ToTable("Vozilos");
                });

            modelBuilder.Entity("CarCareHub.Services.Database.Zaposlenik", b =>
                {
                    b.Property<int>("ZaposlenikId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("ZaposlenikID");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ZaposlenikId"));

                    b.Property<int?>("BrojTelefona")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DatumRodjenja")
                        .HasColumnType("date")
                        .HasColumnName("datum_rodjenja");

                    b.Property<string>("Email")
                        .HasMaxLength(30)
                        .IsUnicode(false)
                        .HasColumnType("varchar(30)")
                        .HasColumnName("email");

                    b.Property<int?>("FirmaAutodijelovaId")
                        .HasColumnType("int")
                        .HasColumnName("firma_autodijelovaID");

                    b.Property<int?>("GradId")
                        .HasColumnType("int");

                    b.Property<string>("Ime")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("ime");

                    b.Property<string>("LozinkaHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LozinkaSalt")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("MaticniBroj")
                        .HasColumnType("int");

                    b.Property<string>("Password")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("password_");

                    b.Property<string>("Prezime")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)")
                        .HasColumnName("prezime");

                    b.Property<int>("UlogaId")
                        .HasColumnType("int");

                    b.Property<string>("Username")
                        .HasMaxLength(20)
                        .IsUnicode(false)
                        .HasColumnType("varchar(20)")
                        .HasColumnName("username");

                    b.Property<int?>("autoservisId")
                        .HasColumnType("int")
                        .HasColumnName("autoservisID");

                    b.HasKey("ZaposlenikId")
                        .HasName("PK_zaposlenik");

                    b.HasIndex("FirmaAutodijelovaId");

                    b.HasIndex("GradId");

                    b.HasIndex("UlogaId");

                    b.HasIndex("autoservisId");

                    b.ToTable("Zaposlenik", (string)null);
                });

            modelBuilder.Entity("ZaposlenikProizvod", b =>
                {
                    b.Property<int>("ZaposlenikId")
                        .HasColumnType("int")
                        .HasColumnName("zaposlenikID");

                    b.Property<int>("ProizvodId")
                        .HasColumnType("int")
                        .HasColumnName("proizvodID");

                    b.HasKey("ZaposlenikId", "ProizvodId")
                        .HasName("PK__Zaposlen__50FD668EDF7047CD");

                    b.HasIndex("ProizvodId");

                    b.ToTable("Zaposlenik_Proizvod", (string)null);
                });

            modelBuilder.Entity("CarCareHub.Services.Database.Autoservis", b =>
                {
                    b.HasOne("CarCareHub.Services.Database.Grad", "Grad")
                        .WithMany("Autoservis")
                        .HasForeignKey("GradId")
                        .HasConstraintName("fk_autoservis_grad");

                    b.HasOne("CarCareHub.Services.Database.Uloge", "Uloga")
                        .WithMany("Autoservis")
                        .HasForeignKey("UlogaId")
                        .HasConstraintName("fk_uloga_autoservis");

                    b.HasOne("CarCareHub.Services.Database.Vozilo", "Vozilo")
                        .WithMany("Autoservis")
                        .HasForeignKey("VoziloId")
                        .HasConstraintName("fk_v_a");

                    b.Navigation("Grad");

                    b.Navigation("Uloga");

                    b.Navigation("Vozilo");
                });

            modelBuilder.Entity("CarCareHub.Services.Database.BPAutodijeloviAutoservis", b =>
                {
                    b.HasOne("CarCareHub.Services.Database.Autoservis", "Autoservis")
                        .WithMany("BPAutodijeloviAutoservis")
                        .HasForeignKey("AutoservisId");

                    b.HasOne("CarCareHub.Services.Database.FirmaAutodijelova", "FirmaAutodijelova")
                        .WithMany("BPAutodijeloviAutoservis")
                        .HasForeignKey("FirmaAutodijelovaID");

                    b.Navigation("Autoservis");

                    b.Navigation("FirmaAutodijelova");
                });

            modelBuilder.Entity("CarCareHub.Services.Database.ChatAutoservisKlijent", b =>
                {
                    b.HasOne("CarCareHub.Services.Database.Autoservis", "Autoservis")
                        .WithMany("ChatPoruke")
                        .HasForeignKey("AutoservisId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CarCareHub.Services.Database.Klijent", "Klijent")
                        .WithMany("ChatAutoservisKlijent")
                        .HasForeignKey("KlijentId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Autoservis");

                    b.Navigation("Klijent");
                });

            modelBuilder.Entity("CarCareHub.Services.Database.ChatKlijentZaposlenik", b =>
                {
                    b.HasOne("CarCareHub.Services.Database.Autoservis", null)
                        .WithMany("ChatKlijentServiss")
                        .HasForeignKey("AutoservisId");

                    b.HasOne("CarCareHub.Services.Database.Klijent", "Klijent")
                        .WithMany("ChatKlijentZaposlenik")
                        .HasForeignKey("KlijentId")
                        .HasConstraintName("fk_klijent_chat2");

                    b.HasOne("CarCareHub.Services.Database.Zaposlenik", "Zaposlenik")
                        .WithMany("ChatKlijentZaposleniks")
                        .HasForeignKey("ZaposlenikId")
                        .HasConstraintName("fk_zaposlenik_chat2");

                    b.Navigation("Klijent");

                    b.Navigation("Zaposlenik");
                });

            modelBuilder.Entity("CarCareHub.Services.Database.FirmaAutodijelova", b =>
                {
                    b.HasOne("CarCareHub.Services.Database.Grad", "Grad")
                        .WithMany("FirmaAutodijelovas")
                        .HasForeignKey("GradId")
                        .HasConstraintName("fk_autoservis_grads");

                    b.HasOne("CarCareHub.Services.Database.Izvjestaj", "Izvjestaj")
                        .WithMany("FirmaAutodijelovas")
                        .HasForeignKey("IzvjestajId")
                        .HasConstraintName("fk_i_fad");

                    b.HasOne("CarCareHub.Services.Database.Uloge", "Uloga")
                        .WithMany("FirmaAutodijelovas")
                        .HasForeignKey("UlogaId")
                        .HasConstraintName("fk_uloga_firmaautodijelova");

                    b.Navigation("Grad");

                    b.Navigation("Izvjestaj");

                    b.Navigation("Uloga");
                });

            modelBuilder.Entity("CarCareHub.Services.Database.Grad", b =>
                {
                    b.HasOne("CarCareHub.Services.Database.Drzava", "Drzava")
                        .WithMany("Grads")
                        .HasForeignKey("DrzavaId")
                        .HasConstraintName("fk_d_g");

                    b.Navigation("Drzava");
                });

            modelBuilder.Entity("CarCareHub.Services.Database.Klijent", b =>
                {
                    b.HasOne("CarCareHub.Services.Database.Grad", "Grad")
                        .WithMany("Klijents")
                        .HasForeignKey("GradId")
                        .HasConstraintName("fk_klijent_grad");

                    b.HasOne("CarCareHub.Services.Database.Uloge", "uloga")
                        .WithMany()
                        .HasForeignKey("UlogaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Grad");

                    b.Navigation("uloga");
                });

            modelBuilder.Entity("CarCareHub.Services.Database.Korpa", b =>
                {
                    b.HasOne("CarCareHub.Services.Database.Autoservis", "Autoservis")
                        .WithMany()
                        .HasForeignKey("AutoservisId");

                    b.HasOne("CarCareHub.Services.Database.Klijent", "Klijent")
                        .WithMany()
                        .HasForeignKey("KlijentId");

                    b.HasOne("CarCareHub.Services.Database.Proizvod", "Proizvod")
                        .WithMany("Korpas")
                        .HasForeignKey("ProizvodId");

                    b.HasOne("CarCareHub.Services.Database.Zaposlenik", "Zaposlenik")
                        .WithMany()
                        .HasForeignKey("ZaposlenikId");

                    b.Navigation("Autoservis");

                    b.Navigation("Klijent");

                    b.Navigation("Proizvod");

                    b.Navigation("Zaposlenik");
                });

            modelBuilder.Entity("CarCareHub.Services.Database.Model", b =>
                {
                    b.HasOne("CarCareHub.Services.Database.Godiste", "Godiste")
                        .WithMany()
                        .HasForeignKey("GodisteId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CarCareHub.Services.Database.Vozilo", "Vozilo")
                        .WithMany("Models")
                        .HasForeignKey("VoziloId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Godiste");

                    b.Navigation("Vozilo");
                });

            modelBuilder.Entity("CarCareHub.Services.Database.NarudzbaStavka", b =>
                {
                    b.HasOne("CarCareHub.Services.Database.Korpa", null)
                        .WithMany("NarudzbaStavkas")
                        .HasForeignKey("KorpaId");

                    b.HasOne("CarCareHub.Services.Database.Narudzba", "Narudzba")
                        .WithMany("NarudzbaStavkas")
                        .HasForeignKey("NarudzbaId");

                    b.HasOne("CarCareHub.Services.Database.Proizvod", "Proizvod")
                        .WithMany()
                        .HasForeignKey("ProizvodId");

                    b.Navigation("Narudzba");

                    b.Navigation("Proizvod");
                });

            modelBuilder.Entity("CarCareHub.Services.Database.PlacanjeAutoservisDijelovi", b =>
                {
                    b.HasOne("CarCareHub.Services.Database.Autoservis", "Autoservis")
                        .WithMany("PlacanjeAutoservisDijelovis")
                        .HasForeignKey("AutoservisId");

                    b.HasOne("CarCareHub.Services.Database.FirmaAutodijelova", "FirmaAutodijelova")
                        .WithMany("PlacanjeAutoservisDijelovis")
                        .HasForeignKey("FirmaAutodijelovaID");

                    b.Navigation("Autoservis");

                    b.Navigation("FirmaAutodijelova");
                });

            modelBuilder.Entity("CarCareHub.Services.Database.Poruka", b =>
                {
                    b.HasOne("CarCareHub.Services.Database.ChatKlijentZaposlenik", "ChatKlijentZaposlenik")
                        .WithMany("Poruka")
                        .HasForeignKey("ChatKlijentZaposlenikId");

                    b.Navigation("ChatKlijentZaposlenik");
                });

            modelBuilder.Entity("CarCareHub.Services.Database.Proizvod", b =>
                {
                    b.HasOne("CarCareHub.Services.Database.FirmaAutodijelova", "FirmaAutodijelova")
                        .WithMany("Proizvods")
                        .HasForeignKey("FirmaAutodijelovaID")
                        .HasConstraintName("FK__Proizvod__FirmaAutodijelova");

                    b.HasOne("CarCareHub.Services.Database.Kategorija", "Kategorija")
                        .WithMany("Proizvods")
                        .HasForeignKey("KategorijaId")
                        .HasConstraintName("fk_kategorija_proizvod");

                    b.HasOne("CarCareHub.Services.Database.Model", "Model")
                        .WithMany()
                        .HasForeignKey("ModelId");

                    b.HasOne("CarCareHub.Services.Database.Proizvodjac", "Proizvodjac")
                        .WithMany("Proizvods")
                        .HasForeignKey("ProizvodjacId")
                        .HasConstraintName("fk_proizvodjac_proizvod");

                    b.HasOne("CarCareHub.Services.Database.Vozilo", null)
                        .WithMany("Proizvods")
                        .HasForeignKey("VoziloId");

                    b.Navigation("FirmaAutodijelova");

                    b.Navigation("Kategorija");

                    b.Navigation("Model");

                    b.Navigation("Proizvodjac");
                });

            modelBuilder.Entity("CarCareHub.Services.Database.Usluge", b =>
                {
                    b.HasOne("CarCareHub.Services.Database.Autoservis", "Autoservis")
                        .WithMany("Usluges")
                        .HasForeignKey("autoservisId");

                    b.Navigation("Autoservis");
                });

            modelBuilder.Entity("CarCareHub.Services.Database.Zaposlenik", b =>
                {
                    b.HasOne("CarCareHub.Services.Database.FirmaAutodijelova", "FirmaAutodijelova")
                        .WithMany("Zaposleniks")
                        .HasForeignKey("FirmaAutodijelovaId")
                        .HasConstraintName("fk_firma_zaposlenik");

                    b.HasOne("CarCareHub.Services.Database.Grad", "Grad")
                        .WithMany("Zaposleniks")
                        .HasForeignKey("GradId");

                    b.HasOne("CarCareHub.Services.Database.Uloge", "Uloga")
                        .WithMany("Zaposleniks")
                        .HasForeignKey("UlogaId")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("CarCareHub.Services.Database.Autoservis", "Autoservis")
                        .WithMany("Zaposleniks")
                        .HasForeignKey("autoservisId")
                        .HasConstraintName("fk_zaposlenik_autoservis");

                    b.Navigation("Autoservis");

                    b.Navigation("FirmaAutodijelova");

                    b.Navigation("Grad");

                    b.Navigation("Uloga");
                });

            modelBuilder.Entity("ZaposlenikProizvod", b =>
                {
                    b.HasOne("CarCareHub.Services.Database.Proizvod", null)
                        .WithMany()
                        .HasForeignKey("ProizvodId")
                        .IsRequired()
                        .HasConstraintName("FK__Zaposleni__proiz__7C4F7684");

                    b.HasOne("CarCareHub.Services.Database.Zaposlenik", null)
                        .WithMany()
                        .HasForeignKey("ZaposlenikId")
                        .IsRequired()
                        .HasConstraintName("FK__Zaposleni__zapos__7B5B524B");
                });

            modelBuilder.Entity("CarCareHub.Services.Database.Autoservis", b =>
                {
                    b.Navigation("BPAutodijeloviAutoservis");

                    b.Navigation("ChatKlijentServiss");

                    b.Navigation("ChatPoruke");

                    b.Navigation("PlacanjeAutoservisDijelovis");

                    b.Navigation("Usluges");

                    b.Navigation("Zaposleniks");
                });

            modelBuilder.Entity("CarCareHub.Services.Database.ChatKlijentZaposlenik", b =>
                {
                    b.Navigation("Poruka");
                });

            modelBuilder.Entity("CarCareHub.Services.Database.Drzava", b =>
                {
                    b.Navigation("Grads");
                });

            modelBuilder.Entity("CarCareHub.Services.Database.FirmaAutodijelova", b =>
                {
                    b.Navigation("BPAutodijeloviAutoservis");

                    b.Navigation("PlacanjeAutoservisDijelovis");

                    b.Navigation("Proizvods");

                    b.Navigation("Zaposleniks");
                });

            modelBuilder.Entity("CarCareHub.Services.Database.Grad", b =>
                {
                    b.Navigation("Autoservis");

                    b.Navigation("FirmaAutodijelovas");

                    b.Navigation("Klijents");

                    b.Navigation("Zaposleniks");
                });

            modelBuilder.Entity("CarCareHub.Services.Database.Izvjestaj", b =>
                {
                    b.Navigation("FirmaAutodijelovas");
                });

            modelBuilder.Entity("CarCareHub.Services.Database.Kategorija", b =>
                {
                    b.Navigation("Proizvods");
                });

            modelBuilder.Entity("CarCareHub.Services.Database.Klijent", b =>
                {
                    b.Navigation("ChatAutoservisKlijent");

                    b.Navigation("ChatKlijentZaposlenik");
                });

            modelBuilder.Entity("CarCareHub.Services.Database.Korpa", b =>
                {
                    b.Navigation("NarudzbaStavkas");
                });

            modelBuilder.Entity("CarCareHub.Services.Database.Narudzba", b =>
                {
                    b.Navigation("NarudzbaStavkas");
                });

            modelBuilder.Entity("CarCareHub.Services.Database.Proizvod", b =>
                {
                    b.Navigation("Korpas");
                });

            modelBuilder.Entity("CarCareHub.Services.Database.Proizvodjac", b =>
                {
                    b.Navigation("Proizvods");
                });

            modelBuilder.Entity("CarCareHub.Services.Database.Uloge", b =>
                {
                    b.Navigation("Autoservis");

                    b.Navigation("FirmaAutodijelovas");

                    b.Navigation("Zaposleniks");
                });

            modelBuilder.Entity("CarCareHub.Services.Database.Vozilo", b =>
                {
                    b.Navigation("Autoservis");

                    b.Navigation("Models");

                    b.Navigation("Proizvods");
                });

            modelBuilder.Entity("CarCareHub.Services.Database.Zaposlenik", b =>
                {
                    b.Navigation("ChatKlijentZaposleniks");
                });
#pragma warning restore 612, 618
        }
    }
}
